package generated

import (
	"fmt"
	"github.com/onsi/ginkgo"
	"github.com/onsi/ginkgo/types"
)

var annotations = map[string]string{
	"[Top Level] Recreate [Feature:Recreate] recreate nodes and ensure they function upon restart":                                                                                                                                                                                                                                                          "recreate nodes and ensure they function upon restart [Disabled:Broken] [sig-cluster-lifecycle] [Suite:k8s]",
	"[Top Level] [Serial] [sig-auth][Feature:OAuthServer] [RequestHeaders] [IdP] test RequestHeaders IdP":                                                                                                                                                                                                                                                   "test RequestHeaders IdP [Suite:openshift/conformance/serial]",
	"[Top Level] [k8s.io] Cluster size autoscaler scalability [Slow] CA ignores unschedulable pods while scheduling schedulable pods [Feature:ClusterAutoscalerScalability6]":                                                                                                                                                                               "CA ignores unschedulable pods while scheduling schedulable pods [Feature:ClusterAutoscalerScalability6] [sig-cluster-lifecycle] [Suite:k8s]",
	"[Top Level] [k8s.io] Cluster size autoscaler scalability [Slow] should scale down empty nodes [Feature:ClusterAutoscalerScalability3]":                                                                                                                                                                                                                 "should scale down empty nodes [Feature:ClusterAutoscalerScalability3] [sig-cluster-lifecycle] [Suite:k8s]",
	"[Top Level] [k8s.io] Cluster size autoscaler scalability [Slow] should scale down underutilized nodes [Feature:ClusterAutoscalerScalability4]":                                                                                                                                                                                                         "should scale down underutilized nodes [Feature:ClusterAutoscalerScalability4] [sig-cluster-lifecycle] [Suite:k8s]",
	"[Top Level] [k8s.io] Cluster size autoscaler scalability [Slow] should scale up at all [Feature:ClusterAutoscalerScalability1]":                                                                                                                                                                                                                        "should scale up at all [Feature:ClusterAutoscalerScalability1] [sig-cluster-lifecycle] [Suite:k8s]",
	"[Top Level] [k8s.io] Cluster size autoscaler scalability [Slow] should scale up twice [Feature:ClusterAutoscalerScalability2]":                                                                                                                                                                                                                         "should scale up twice [Feature:ClusterAutoscalerScalability2] [sig-cluster-lifecycle] [Suite:k8s]",
	"[Top Level] [k8s.io] Cluster size autoscaler scalability [Slow] shouldn't scale down with underutilized nodes due to host port conflicts [Feature:ClusterAutoscalerScalability5]":                                                                                                                                                                      "shouldn't scale down with underutilized nodes due to host port conflicts [Feature:ClusterAutoscalerScalability5] [sig-cluster-lifecycle] [Suite:k8s]",
	"[Top Level] [k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]":                                                                                                                                                                                       "should execute poststart exec hook properly [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]":                                                                                                                                                                                       "should execute poststart http hook properly [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]":                                                                                                                                                                                         "should execute prestop exec hook properly [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]":                                                                                                                                                                                         "should execute prestop http hook properly [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] as empty when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]":                                                                                                       "should report termination message [LinuxOnly] as empty when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] from file when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]":                                                                                                      "should report termination message [LinuxOnly] from file when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] from log output if TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]":                                                                                                                   "should report termination message [LinuxOnly] from log output if TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] if TerminationMessagePath is set [NodeConformance]":                                                                                                                                                                         "should report termination message [LinuxOnly] if TerminationMessagePath is set [NodeConformance] [sig-node] [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] if TerminationMessagePath is set as non-root user and at a non-default path [NodeConformance] [Conformance]":                                                                                                                "should report termination message [LinuxOnly] if TerminationMessagePath is set as non-root user and at a non-default path [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] Container Runtime blackbox test when running a container with a new image should be able to pull from private registry with secret [NodeConformance]":                                                                                                                                                                             "should be able to pull from private registry with secret [NodeConformance] [sig-node] [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] Container Runtime blackbox test when running a container with a new image should be able to pull image [NodeConformance]":                                                                                                                                                                                                         "should be able to pull image [NodeConformance] [sig-node] [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] Container Runtime blackbox test when running a container with a new image should not be able to pull from private registry without secret [NodeConformance]":                                                                                                                                                                      "should not be able to pull from private registry without secret [NodeConformance] [sig-node] [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] Container Runtime blackbox test when running a container with a new image should not be able to pull image from invalid registry [NodeConformance]":                                                                                                                                                                               "should not be able to pull image from invalid registry [NodeConformance] [sig-node] [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] Container Runtime blackbox test when starting a container that exits should run with the expected status [NodeConformance] [Conformance]":                                                                                                                                                                                         "should run with the expected status [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance]":                                                                                                                                                                                                          "should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] Docker Containers should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance]":                                                                                                                                                                                                     "should be able to override the image's default command (docker entrypoint) [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] Docker Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]":                                                                                                                                                                                                           "should be able to override the image's default command and arguments [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] Docker Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]":                                                                                                                                                                                                                    "should use the image defaults if command and args are blank [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] Downward API [Serial] [Disruptive] [NodeFeature:EphemeralStorage] Downward API tests for local ephemeral storage should provide container's limits.ephemeral-storage and requests.ephemeral-storage as env vars":                                                                                                                  "should provide container's limits.ephemeral-storage and requests.ephemeral-storage as env vars [sig-node] [Suite:k8s]",
	"[Top Level] [k8s.io] Downward API [Serial] [Disruptive] [NodeFeature:EphemeralStorage] Downward API tests for local ephemeral storage should provide default limits.ephemeral-storage from node allocatable":                                                                                                                                           "should provide default limits.ephemeral-storage from node allocatable [sig-node] [Suite:k8s]",
	"[Top Level] [k8s.io] GKE local SSD [Feature:GKELocalSSD] should write and read from node local SSD [Feature:GKELocalSSD]":                                                                                                                                                                                                                              "should write and read from node local SSD [Feature:GKELocalSSD] [sig-arch] [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] GKE node pools [Feature:GKENodePool] should create a cluster with multiple node pools [Feature:GKENodePool]":                                                                                                                                                                                                                      "should create a cluster with multiple node pools [Feature:GKENodePool] [sig-arch] [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]":                                                                                                                                                                                                                               "should invoke init containers on a RestartAlways pod [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]":                                                                                                                                                                                                                                "should invoke init containers on a RestartNever pod [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]":                                                                                                                                                                                     "should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]":                                                                                                                                                                                                     "should not start app containers if init containers fail on a RestartAlways pod [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] Kubelet when scheduling a busybox Pod with hostAliases should write entries to /etc/hosts [LinuxOnly] [NodeConformance] [Conformance]":                                                                                                                                                                                            "should write entries to /etc/hosts [LinuxOnly] [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] Kubelet when scheduling a busybox command in a pod should print the output to logs [NodeConformance] [Conformance]":                                                                                                                                                                                                               "should print the output to logs [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] Kubelet when scheduling a busybox command that always fails in a pod should be possible to delete [NodeConformance] [Conformance]":                                                                                                                                                                                                "should be possible to delete [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] Kubelet when scheduling a busybox command that always fails in a pod should have an terminated reason [NodeConformance] [Conformance]":                                                                                                                                                                                            "should have an terminated reason [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] Kubelet when scheduling a read only busybox container should not write to root filesystem [LinuxOnly] [NodeConformance] [Conformance]":                                                                                                                                                                                            "should not write to root filesystem [LinuxOnly] [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [LinuxOnly] [NodeConformance] [Conformance]":                                                                                                                                                                                                                   "should test kubelet managed /etc/hosts file [LinuxOnly] [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] Lease lease API should be available [Conformance]":                                                                                                                                                                                                                                                                                "lease API should be available [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] NodeLease when the NodeLease feature is enabled should have OwnerReferences set":                                                                                                                                                                                                                                                  "should have OwnerReferences set [Disabled:Broken] [sig-node] [Suite:k8s]",
	"[Top Level] [k8s.io] NodeLease when the NodeLease feature is enabled the kubelet should create and update a lease in the kube-node-lease namespace":                                                                                                                                                                                                    "the kubelet should create and update a lease in the kube-node-lease namespace [Disabled:Broken] [sig-node] [Suite:k8s]",
	"[Top Level] [k8s.io] NodeLease when the NodeLease feature is enabled the kubelet should report node status infrequently":                                                                                                                                                                                                                               "the kubelet should report node status infrequently [Disabled:Broken] [sig-node] [Suite:k8s]",
	"[Top Level] [k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]":                                                                                                                                                                                                                                            "should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance]":                                                                                                                                                                                                                                                             "should be submitted and removed [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] Pods should be updated [NodeConformance] [Conformance]":                                                                                                                                                                                                                                                                           "should be updated [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] Pods should cap back-off at MaxContainerBackOff [Slow][NodeConformance]":                                                                                                                                                                                                                                                          "should cap back-off at MaxContainerBackOff [Slow][NodeConformance] [sig-node] [Suite:k8s]",
	"[Top Level] [k8s.io] Pods should contain environment variables for services [NodeConformance] [Conformance]":                                                                                                                                                                                                                                           "should contain environment variables for services [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] Pods should get a host IP [NodeConformance] [Conformance]":                                                                                                                                                                                                                                                                        "should get a host IP [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] Pods should have their auto-restart back-off timer reset on image update [Slow][NodeConformance]":                                                                                                                                                                                                                                 "should have their auto-restart back-off timer reset on image update [Slow][NodeConformance] [sig-node] [Suite:k8s]",
	"[Top Level] [k8s.io] Pods should support pod readiness gates [NodeFeature:PodReadinessGate]":                                                                                                                                                                                                                                                           "should support pod readiness gates [NodeFeature:PodReadinessGate] [sig-node] [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] Pods should support remote command execution over websockets [NodeConformance] [Conformance]":                                                                                                                                                                                                                                     "should support remote command execution over websockets [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] Pods should support retrieving logs from the container over websockets [NodeConformance] [Conformance]":                                                                                                                                                                                                                           "should support retrieving logs from the container over websockets [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] PrivilegedPod [NodeConformance] should enable privileged commands [LinuxOnly]":                                                                                                                                                                                                                                                    "should enable privileged commands [LinuxOnly] [sig-node] [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]":                                                                                                                                                                                                                  "should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]":                                                                                                                                                                                                       "should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] Probing container should *not* be restarted with a non-local redirect http liveness probe":                                                                                                                                                                                                                                        "should *not* be restarted with a non-local redirect http liveness probe [sig-node] [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] Probing container should *not* be restarted with a tcp:8080 liveness probe [NodeConformance]":                                                                                                                                                                                                                                     "should *not* be restarted with a tcp:8080 liveness probe [NodeConformance] [sig-node] [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]":                                                                                                                                                                                                                        "should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] Probing container should be restarted with a docker exec liveness probe with timeout ":                                                                                                                                                                                                                                            "should be restarted with a docker exec liveness probe with timeout  [sig-node] [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]":                                                                                                                                                                                                             "should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] Probing container should be restarted with a local redirect http liveness probe":                                                                                                                                                                                                                                                  "should be restarted with a local redirect http liveness probe [sig-node] [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] Probing container should have monotonically increasing restart count [NodeConformance] [Conformance]":                                                                                                                                                                                                                             "should have monotonically increasing restart count [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]":                                                                                                                                                                                                "with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]":                                                                                                                                                                                                        "with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] Security Context When creating a container with runAsNonRoot should not run with an explicit root user ID [LinuxOnly]":                                                                                                                                                                                                            "should not run with an explicit root user ID [LinuxOnly] [sig-node] [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] Security Context When creating a container with runAsNonRoot should not run without a specified user ID":                                                                                                                                                                                                                          "should not run without a specified user ID [sig-node] [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] Security Context When creating a container with runAsNonRoot should run with an explicit non-root user ID [LinuxOnly]":                                                                                                                                                                                                            "should run with an explicit non-root user ID [LinuxOnly] [sig-node] [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] Security Context When creating a container with runAsNonRoot should run with an image specified user ID":                                                                                                                                                                                                                          "should run with an image specified user ID [sig-node] [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] Security Context When creating a container with runAsUser should run the container with uid 0 [LinuxOnly] [NodeConformance]":                                                                                                                                                                                                      "should run the container with uid 0 [LinuxOnly] [NodeConformance] [sig-node] [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] Security Context When creating a container with runAsUser should run the container with uid 65534 [LinuxOnly] [NodeConformance] [Conformance]":                                                                                                                                                                                    "should run the container with uid 65534 [LinuxOnly] [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] Security Context When creating a pod with privileged should run the container as privileged when true [LinuxOnly] [NodeFeature:HostAccess]":                                                                                                                                                                                       "should run the container as privileged when true [LinuxOnly] [NodeFeature:HostAccess] [sig-node] [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] Security Context When creating a pod with privileged should run the container as unprivileged when false [LinuxOnly] [NodeConformance] [Conformance]":                                                                                                                                                                             "should run the container as unprivileged when false [LinuxOnly] [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] Security Context When creating a pod with readOnlyRootFilesystem should run the container with readonly rootfs when readOnlyRootFilesystem=true [LinuxOnly] [NodeConformance]":                                                                                                                                                    "should run the container with readonly rootfs when readOnlyRootFilesystem=true [LinuxOnly] [NodeConformance] [sig-node] [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] Security Context When creating a pod with readOnlyRootFilesystem should run the container with writable rootfs when readOnlyRootFilesystem=false [NodeConformance] [Conformance]":                                                                                                                                                 "should run the container with writable rootfs when readOnlyRootFilesystem=false [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] Security Context when creating containers with AllowPrivilegeEscalation should allow privilege escalation when not explicitly set and uid != 0 [LinuxOnly] [NodeConformance]":                                                                                                                                                     "should allow privilege escalation when not explicitly set and uid != 0 [LinuxOnly] [NodeConformance] [sig-node] [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] Security Context when creating containers with AllowPrivilegeEscalation should allow privilege escalation when true [LinuxOnly] [NodeConformance]":                                                                                                                                                                                "should allow privilege escalation when true [LinuxOnly] [NodeConformance] [sig-node] [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] Security Context when creating containers with AllowPrivilegeEscalation should not allow privilege escalation when false [LinuxOnly] [NodeConformance] [Conformance]":                                                                                                                                                             "should not allow privilege escalation when false [LinuxOnly] [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] Sysctls [LinuxOnly] [NodeFeature:Sysctls] should not launch unsafe, but not explicitly enabled sysctls on the node":                                                                                                                                                                                                               "should not launch unsafe, but not explicitly enabled sysctls on the node [Disabled:Broken] [sig-node] [Suite:k8s]",
	"[Top Level] [k8s.io] Sysctls [LinuxOnly] [NodeFeature:Sysctls] should reject invalid sysctls":                                                                                                                                                                                                                                                          "should reject invalid sysctls [Disabled:Broken] [sig-node] [Suite:k8s]",
	"[Top Level] [k8s.io] Sysctls [LinuxOnly] [NodeFeature:Sysctls] should support sysctls":                                                                                                                                                                                                                                                                 "should support sysctls [Disabled:Broken] [sig-node] [Suite:k8s]",
	"[Top Level] [k8s.io] Sysctls [LinuxOnly] [NodeFeature:Sysctls] should support unsafe sysctls which are actually whitelisted":                                                                                                                                                                                                                           "should support unsafe sysctls which are actually whitelisted [Disabled:Broken] [sig-node] [Suite:k8s]",
	"[Top Level] [k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]":                                                                                                                                                                                                                             "should allow composing env vars into new env vars [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]":                                                                                                                                                                                                                        "should allow substituting values in a container's args [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]":                                                                                                                                                                                                                     "should allow substituting values in a container's command [NodeConformance] [Conformance] [sig-node] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] Variable Expansion should allow substituting values in a volume subpath [sig-storage]":                                                                                                                                                                                                                                            "should allow substituting values in a volume subpath [sig-storage] [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] Variable Expansion should fail substituting values in a volume subpath with absolute path [sig-storage][Slow]":                                                                                                                                                                                                                    "should fail substituting values in a volume subpath with absolute path [sig-storage][Slow] [Suite:k8s]",
	"[Top Level] [k8s.io] Variable Expansion should fail substituting values in a volume subpath with backticks [sig-storage][Slow]":                                                                                                                                                                                                                        "should fail substituting values in a volume subpath with backticks [sig-storage][Slow] [Suite:k8s]",
	"[Top Level] [k8s.io] Variable Expansion should not change the subpath mount on a container restart if the environment variable changes [sig-storage][Slow]":                                                                                                                                                                                            "should not change the subpath mount on a container restart if the environment variable changes [sig-storage][Slow] [Suite:k8s]",
	"[Top Level] [k8s.io] Variable Expansion should succeed in writing subpaths in container [sig-storage][Slow]":                                                                                                                                                                                                                                           "should succeed in writing subpaths in container [sig-storage][Slow] [Suite:k8s]",
	"[Top Level] [k8s.io] Variable Expansion should verify that a failing subpath expansion can be modified during the lifecycle of a container [sig-storage][Slow]":                                                                                                                                                                                        "should verify that a failing subpath expansion can be modified during the lifecycle of a container [sig-storage][Slow] [Suite:k8s]",
	"[Top Level] [k8s.io] [Feature:Example] [k8s.io] Downward API should create a pod that prints his name and namespace":                                                                                                                                                                                                                                   "should create a pod that prints his name and namespace [sig-node] [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] [Feature:Example] [k8s.io] Liveness liveness pods should be automatically restarted":                                                                                                                                                                                                                                              "liveness pods should be automatically restarted [sig-node] [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] [Feature:Example] [k8s.io] Secret should create a pod that reads a secret":                                                                                                                                                                                                                                                        "should create a pod that reads a secret [sig-node] [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] [Feature:TTLAfterFinished][NodeAlphaFeature:TTLAfterFinished] job should be deleted once it finishes after TTL seconds":                                                                                                                                                                                                           "job should be deleted once it finishes after TTL seconds [Disabled:Alpha] [sig-node] [Suite:k8s]",
	"[Top Level] [k8s.io] [sig-node] AppArmor load AppArmor profiles can disable an AppArmor profile, using unconfined":                                                                                                                                                                                                                                     "can disable an AppArmor profile, using unconfined [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] [sig-node] AppArmor load AppArmor profiles should enforce an AppArmor profile":                                                                                                                                                                                                                                                    "should enforce an AppArmor profile [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] [sig-node] Events should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance]":                                                                                                                                                                                                                  "should be sent by kubelets and the scheduler about pods scheduling and running  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] [sig-node] Kubelet [Serial] [Slow] [k8s.io] [sig-node] experimental resource usage tracking [Feature:ExperimentalResourceUsageTracking] resource tracking for 100 pods per node":                                                                                                                                                  "resource tracking for 100 pods per node [Suite:k8s]",
	"[Top Level] [k8s.io] [sig-node] Kubelet [Serial] [Slow] [k8s.io] [sig-node] regular resource usage tracking [Feature:RegularResourceUsageTracking] resource tracking for 0 pods per node":                                                                                                                                                              "resource tracking for 0 pods per node [Suite:k8s]",
	"[Top Level] [k8s.io] [sig-node] Kubelet [Serial] [Slow] [k8s.io] [sig-node] regular resource usage tracking [Feature:RegularResourceUsageTracking] resource tracking for 100 pods per node":                                                                                                                                                            "resource tracking for 100 pods per node [Suite:k8s]",
	"[Top Level] [k8s.io] [sig-node] Mount propagation should propagate mounts to the host":                                                                                                                                                                                                                                                                 "should propagate mounts to the host [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] [sig-node] NodeProblemDetector [DisabledForLargeClusters] should run without error":                                                                                                                                                                                                                                               "should run without error [Disabled:SpecialConfig] [Suite:k8s]",
	"[Top Level] [k8s.io] [sig-node] Pod garbage collector [Feature:PodGarbageCollector] [Slow] should handle the creation of 1000 pods":                                                                                                                                                                                                                    "should handle the creation of 1000 pods [Suite:k8s]",
	"[Top Level] [k8s.io] [sig-node] Pods Extended [k8s.io] Delete Grace Period should be submitted and removed [Conformance]":                                                                                                                                                                                                                              "should be submitted and removed [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] [sig-node] Pods Extended [k8s.io] Pod Container Status should never report success for a pending container":                                                                                                                                                                                                                       "should never report success for a pending container [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be set on Pods with matching resource requests and limits for memory and cpu [Conformance]":                                                                                                                                                                           "should be set on Pods with matching resource requests and limits for memory and cpu [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] [sig-node] PreStop graceful pod terminated should wait until preStop hook completes the process [Flaky]":                                                                                                                                                                                                                          "graceful pod terminated should wait until preStop hook completes the process [Flaky] [Suite:k8s]",
	"[Top Level] [k8s.io] [sig-node] PreStop should call prestop when killing a pod  [Conformance]":                                                                                                                                                                                                                                                         "should call prestop when killing a pod  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [k8s.io] [sig-node] SSH should SSH to all nodes and run commands":                                                                                                                                                                                                                                                                          "should SSH to all nodes and run commands [Disabled:Broken] [Suite:k8s]",
	"[Top Level] [k8s.io] [sig-node] Security Context should support container.SecurityContext.RunAsUser And container.SecurityContext.RunAsGroup [LinuxOnly]":                                                                                                                                                                                              "should support container.SecurityContext.RunAsUser And container.SecurityContext.RunAsGroup [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] [sig-node] Security Context should support container.SecurityContext.RunAsUser [LinuxOnly]":                                                                                                                                                                                                                                       "should support container.SecurityContext.RunAsUser [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] [sig-node] Security Context should support pod.Spec.SecurityContext.RunAsUser And pod.Spec.SecurityContext.RunAsGroup [LinuxOnly]":                                                                                                                                                                                                "should support pod.Spec.SecurityContext.RunAsUser And pod.Spec.SecurityContext.RunAsGroup [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] [sig-node] Security Context should support pod.Spec.SecurityContext.RunAsUser [LinuxOnly]":                                                                                                                                                                                                                                        "should support pod.Spec.SecurityContext.RunAsUser [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] [sig-node] Security Context should support pod.Spec.SecurityContext.SupplementalGroups [LinuxOnly]":                                                                                                                                                                                                                               "should support pod.Spec.SecurityContext.SupplementalGroups [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] [sig-node] Security Context should support seccomp alpha runtime/default annotation [Feature:Seccomp] [LinuxOnly]":                                                                                                                                                                                                                "should support seccomp alpha runtime/default annotation [Feature:Seccomp] [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] [sig-node] Security Context should support seccomp alpha unconfined annotation on the container [Feature:Seccomp] [LinuxOnly]":                                                                                                                                                                                                    "should support seccomp alpha unconfined annotation on the container [Feature:Seccomp] [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] [sig-node] Security Context should support seccomp alpha unconfined annotation on the pod [Feature:Seccomp] [LinuxOnly]":                                                                                                                                                                                                          "should support seccomp alpha unconfined annotation on the pod [Feature:Seccomp] [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] [sig-node] Security Context should support seccomp default which is unconfined [Feature:Seccomp] [LinuxOnly]":                                                                                                                                                                                                                     "should support seccomp default which is unconfined [Feature:Seccomp] [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] [sig-node] Security Context should support volume SELinux relabeling [Flaky] [LinuxOnly]":                                                                                                                                                                                                                                         "should support volume SELinux relabeling [Flaky] [LinuxOnly] [Suite:k8s]",
	"[Top Level] [k8s.io] [sig-node] Security Context should support volume SELinux relabeling when using hostIPC [Flaky] [LinuxOnly]":                                                                                                                                                                                                                      "should support volume SELinux relabeling when using hostIPC [Flaky] [LinuxOnly] [Suite:k8s]",
	"[Top Level] [k8s.io] [sig-node] Security Context should support volume SELinux relabeling when using hostPID [Flaky] [LinuxOnly]":                                                                                                                                                                                                                      "should support volume SELinux relabeling when using hostPID [Flaky] [LinuxOnly] [Suite:k8s]",
	"[Top Level] [k8s.io] [sig-node] crictl should be able to run crictl on the node":                                                                                                                                                                                                                                                                       "should be able to run crictl on the node [Skipped:gce] [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [k8s.io] [sig-node] kubelet [k8s.io] [sig-node] Clean up pods on node kubelet should be able to delete 10 pods per node in 1m0s.":                                                                                                                                                                                                          "kubelet should be able to delete 10 pods per node in 1m0s. [Serial] [Suite:openshift/conformance/serial] [Suite:k8s]",
	"[Top Level] [k8s.io] [sig-node] kubelet [k8s.io] [sig-node] host cleanup with volume mounts [sig-storage][HostCleanup][Flaky] Host cleanup after disrupting NFS volume [NFS] after stopping the nfs-server and deleting the (active) client pod, the NFS mount and the pod's UID directory should be removed.":                                         "after stopping the nfs-server and deleting the (active) client pod, the NFS mount and the pod's UID directory should be removed. [Suite:k8s]",
	"[Top Level] [k8s.io] [sig-node] kubelet [k8s.io] [sig-node] host cleanup with volume mounts [sig-storage][HostCleanup][Flaky] Host cleanup after disrupting NFS volume [NFS] after stopping the nfs-server and deleting the (sleeping) client pod, the NFS mount and the pod's UID directory should be removed.":                                       "after stopping the nfs-server and deleting the (sleeping) client pod, the NFS mount and the pod's UID directory should be removed. [Suite:k8s]",
	"[Top Level] [sig-api-machinery] API data in etcd should be stored at the correct location and version for all resources [Serial]":                                                                                                                                                                                                                      "should be stored at the correct location and version for all resources [Serial] [Suite:openshift/conformance/serial]",
	"[Top Level] [sig-api-machinery] APIServer CR fields validation additionalCORSAllowedOrigins":                                                                                                                                                                                                                                                           "additionalCORSAllowedOrigins [Suite:openshift/conformance/parallel]",
	"[Top Level] [sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]":                                                                                                                                                                                                                        "listing mutating webhooks should work [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]":                                                                                                                                                                                                                      "listing validating webhooks should work [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]":                                                                                                                                                                                                             "patching/updating a mutating webhook should work [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]":                                                                                                                                                                                                           "patching/updating a validating webhook should work [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]":                                                                                                                                                                                                                         "should be able to deny attaching pod [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]":                                                                                                                                                                                         "should be able to deny custom resource creation, update and deletion [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]":                                                                                                                                                                                                            "should be able to deny pod and configmap creation [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]":                                                                                                                                                                                                                                     "should deny crd creation [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]":                                                                                                                                                                                                                                         "should honor timeout [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]":                                                                                                                                                                                                      "should include webhook resources in discovery documents [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]":                                                                                                                                                                                                                                      "should mutate configmap [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]":                                                                                                                                                                                                                                "should mutate custom resource [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]":                                                                                                                                                                                                  "should mutate custom resource with different stored version [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]":                                                                                                                                                                                                                   "should mutate custom resource with pruning [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]":                                                                                                                                                                                                          "should mutate pod and apply defaults after mutation [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]":                                                                                                                                                                            "should not be able to mutate or prevent deletion of webhook configuration objects [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]":                                                                                                                                                                                              "should unconditionally reject operations on fail closed webhook [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] Aggregator Should be able to support the 1.10 Sample API Server using the current Aggregator [Conformance]":                                                                                                                                                                                                            "Should be able to support the 1.10 Sample API Server using the current Aggregator [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]":                                                                                                                                                                                       "should be able to convert a non homogeneous list of CRs [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance]":                                                                                                                                                                                                 "should be able to convert from CR v1 to CR v2 [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] CustomResourceDefinition Watch [Privileged:ClusterAdmin] CustomResourceDefinition Watch watch on custom resource definition objects [Conformance]":                                                                                                                                                                     "watch on custom resource definition objects [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]":                                                                                                                                                "creating/deleting custom resource definition objects works  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition getting/updating/patching custom resource definition status sub-resource works  [Conformance]":                                                                                                                            "getting/updating/patching custom resource definition status sub-resource works  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition listing custom resource definition objects works  [Conformance]":                                                                                                                                                          "listing custom resource definition objects works  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] custom resource defaulting for requests and from storage works  [Conformance]":                                                                                                                                                                            "custom resource defaulting for requests and from storage works  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] should include custom resource definition resources in discovery documents [Conformance]":                                                                                                                                                                 "should include custom resource definition resources in discovery documents [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] removes definition from spec when one version gets changed to not be served [Conformance]":                                                                                                                                                                      "removes definition from spec when one version gets changed to not be served [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] updates the published spec when one version gets renamed [Conformance]":                                                                                                                                                                                         "updates the published spec when one version gets renamed [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields at the schema root [Conformance]":                                                                                                                                                                                       "works for CRD preserving unknown fields at the schema root [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields in an embedded object [Conformance]":                                                                                                                                                                                    "works for CRD preserving unknown fields in an embedded object [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD with validation schema [Conformance]":                                                                                                                                                                                                             "works for CRD with validation schema [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD without validation schema [Conformance]":                                                                                                                                                                                                          "works for CRD without validation schema [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of different groups [Conformance]":                                                                                                                                                                                                      "works for multiple CRDs of different groups [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group and version but different kinds [Conformance]":                                                                                                                                                                            "works for multiple CRDs of same group and version but different kinds [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group but different versions [Conformance]":                                                                                                                                                                                     "works for multiple CRDs of same group but different versions [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] Discovery Custom resource should have storage version hash":                                                                                                                                                                                                                                                            "Custom resource should have storage version hash [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] Etcd failure [Disruptive] should recover from SIGKILL":                                                                                                                                                                                                                                                                 "should recover from SIGKILL [Serial] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] Etcd failure [Disruptive] should recover from network partition with master":                                                                                                                                                                                                                                           "should recover from network partition with master [Serial] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]":                                                                                                                                                                                                                             "should delete RS created by deployment when not orphaning [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] Garbage collector should delete jobs and pods created by cronjob":                                                                                                                                                                                                                                                      "should delete jobs and pods created by cronjob [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]":                                                                                                                                                                                                                                   "should delete pods created by rc when not orphaning [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]":                                                                                                                                                                                                 "should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]":                                                                                                                                                                                                                                            "should not be blocked by dependency circle [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]":                                                                                                                                                                         "should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]":                                                                                                                                                                                                 "should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]":                                                                                                                                                                                                                             "should orphan pods created by rc if delete options say so [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] Garbage collector should orphan pods created by rc if deleteOptions.OrphanDependents is nil":                                                                                                                                                                                                                           "should orphan pods created by rc if deleteOptions.OrphanDependents is nil [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] Garbage collector should support cascading deletion of custom resources":                                                                                                                                                                                                                                               "should support cascading deletion of custom resources [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] Garbage collector should support orphan deletion of custom resources":                                                                                                                                                                                                                                                  "should support orphan deletion of custom resources [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] Generated clientset should create pods, set the deletionTimestamp and deletionGracePeriodSeconds of the pod":                                                                                                                                                                                                           "should create pods, set the deletionTimestamp and deletionGracePeriodSeconds of the pod [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] Generated clientset should create v1beta1 cronJobs, delete cronJobs, watch cronJobs":                                                                                                                                                                                                                                   "should create v1beta1 cronJobs, delete cronJobs, watch cronJobs [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] Namespaces [Serial] should always delete fast (ALL of 100 namespaces in 150 seconds) [Feature:ComprehensiveNamespaceDraining]":                                                                                                                                                                                         "should always delete fast (ALL of 100 namespaces in 150 seconds) [Feature:ComprehensiveNamespaceDraining] [Suite:openshift/conformance/serial] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] Namespaces [Serial] should delete fast enough (90 percent of 100 namespaces in 150 seconds)":                                                                                                                                                                                                                           "should delete fast enough (90 percent of 100 namespaces in 150 seconds) [Suite:openshift/conformance/serial] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]":                                                                                                                                                                                                                 "should ensure that all pods are removed when a namespace is deleted [Conformance] [Suite:openshift/conformance/serial/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]":                                                                                                                                                                                                             "should ensure that all services are removed when a namespace is deleted [Conformance] [Suite:openshift/conformance/serial/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] ResourceQuota [Feature:PodPriority] should verify ResourceQuota's multiple priority class scope (quota set to pod count: 2) against 2 pods with same priority classes.":                                                                                                                                                "should verify ResourceQuota's multiple priority class scope (quota set to pod count: 2) against 2 pods with same priority classes. [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] ResourceQuota [Feature:PodPriority] should verify ResourceQuota's priority class scope (cpu, memory quota set) against a pod with same priority class.":                                                                                                                                                                "should verify ResourceQuota's priority class scope (cpu, memory quota set) against a pod with same priority class. [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] ResourceQuota [Feature:PodPriority] should verify ResourceQuota's priority class scope (quota set to pod count: 1) against 2 pods with different priority class.":                                                                                                                                                      "should verify ResourceQuota's priority class scope (quota set to pod count: 1) against 2 pods with different priority class. [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] ResourceQuota [Feature:PodPriority] should verify ResourceQuota's priority class scope (quota set to pod count: 1) against 2 pods with same priority class.":                                                                                                                                                           "should verify ResourceQuota's priority class scope (quota set to pod count: 1) against 2 pods with same priority class. [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] ResourceQuota [Feature:PodPriority] should verify ResourceQuota's priority class scope (quota set to pod count: 1) against a pod with different priority class (ScopeSelectorOpExists).":                                                                                                                               "should verify ResourceQuota's priority class scope (quota set to pod count: 1) against a pod with different priority class (ScopeSelectorOpExists). [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] ResourceQuota [Feature:PodPriority] should verify ResourceQuota's priority class scope (quota set to pod count: 1) against a pod with different priority class (ScopeSelectorOpNotIn).":                                                                                                                                "should verify ResourceQuota's priority class scope (quota set to pod count: 1) against a pod with different priority class (ScopeSelectorOpNotIn). [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] ResourceQuota [Feature:PodPriority] should verify ResourceQuota's priority class scope (quota set to pod count: 1) against a pod with same priority class.":                                                                                                                                                            "should verify ResourceQuota's priority class scope (quota set to pod count: 1) against a pod with same priority class. [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] ResourceQuota [Feature:ScopeSelectors] should verify ResourceQuota with best effort scope using scope-selectors.":                                                                                                                                                                                                      "should verify ResourceQuota with best effort scope using scope-selectors. [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] ResourceQuota [Feature:ScopeSelectors] should verify ResourceQuota with terminating scopes through scope selectors.":                                                                                                                                                                                                   "should verify ResourceQuota with terminating scopes through scope selectors. [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] ResourceQuota should be able to update and delete ResourceQuota. [Conformance]":                                                                                                                                                                                                                                        "should be able to update and delete ResourceQuota. [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a configMap. [Conformance]":                                                                                                                                                                                                                        "should create a ResourceQuota and capture the life of a configMap. [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a custom resource.":                                                                                                                                                                                                                                "should create a ResourceQuota and capture the life of a custom resource. [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a persistent volume claim with a storage class. [sig-storage]":                                                                                                                                                                                     "should create a ResourceQuota and capture the life of a persistent volume claim with a storage class. [sig-storage] [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a persistent volume claim. [sig-storage]":                                                                                                                                                                                                          "should create a ResourceQuota and capture the life of a persistent volume claim. [sig-storage] [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a pod. [Conformance]":                                                                                                                                                                                                                              "should create a ResourceQuota and capture the life of a pod. [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replica set. [Conformance]":                                                                                                                                                                                                                      "should create a ResourceQuota and capture the life of a replica set. [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replication controller. [Conformance]":                                                                                                                                                                                                           "should create a ResourceQuota and capture the life of a replication controller. [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a secret. [Conformance]":                                                                                                                                                                                                                           "should create a ResourceQuota and capture the life of a secret. [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a service. [Conformance]":                                                                                                                                                                                                                          "should create a ResourceQuota and capture the life of a service. [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] ResourceQuota should create a ResourceQuota and ensure its status is promptly calculated. [Conformance]":                                                                                                                                                                                                               "should create a ResourceQuota and ensure its status is promptly calculated. [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] ResourceQuota should verify ResourceQuota with best effort scope. [Conformance]":                                                                                                                                                                                                                                       "should verify ResourceQuota with best effort scope. [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] ResourceQuota should verify ResourceQuota with terminating scopes. [Conformance]":                                                                                                                                                                                                                                      "should verify ResourceQuota with terminating scopes. [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]":                                                                                                                                                                                                                                    "should be consumable from pods in env vars [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] Secrets should be consumable via the environment [NodeConformance] [Conformance]":                                                                                                                                                                                                                                      "should be consumable via the environment [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] Secrets should fail to create secret due to empty secret key [Conformance]":                                                                                                                                                                                                                                            "should fail to create secret due to empty secret key [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] Servers with support for API chunking should return chunks of results for list calls":                                                                                                                                                                                                                                  "should return chunks of results for list calls [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] Servers with support for API chunking should support continue listing from the last key if the original version has been compacted away, though the list is inconsistent [Slow]":                                                                                                                                       "should support continue listing from the last key if the original version has been compacted away, though the list is inconsistent [Slow] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] Servers with support for Table transformation should return a 406 for a backend which does not implement metadata [Conformance]":                                                                                                                                                                                       "should return a 406 for a backend which does not implement metadata [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] Servers with support for Table transformation should return chunks of table results for list calls":                                                                                                                                                                                                                    "should return chunks of table results for list calls [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] Servers with support for Table transformation should return generic metadata details across all namespaces for nodes":                                                                                                                                                                                                  "should return generic metadata details across all namespaces for nodes [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] Servers with support for Table transformation should return pod details":                                                                                                                                                                                                                                               "should return pod details [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]":                                                                                                                                                                                               "should be able to restart watching from the last resource version observed by the previous watch [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]":                                                                                                                                                                                                                              "should be able to start watching from a specific resource version [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]":                                                                                                                                                                                                                       "should observe add, update, and delete watch notifications on configmaps [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]":                                                                                                                                                                                                         "should observe an object deletion if it stops meeting the requirements of the selector [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] Watchers should receive events on concurrent watches in same order [Conformance]":                                                                                                                                                                                                                                      "should receive events on concurrent watches in same order [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] client-go should negotiate watch and report errors with accept \"application/json,application/vnd.kubernetes.protobuf\"":                                                                                                                                                                                               "watch and report errors with accept \"application/json,application/vnd.kubernetes.protobuf\" [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] client-go should negotiate watch and report errors with accept \"application/json\"":                                                                                                                                                                                                                                   "watch and report errors with accept \"application/json\" [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] client-go should negotiate watch and report errors with accept \"application/vnd.kubernetes.protobuf,application/json\"":                                                                                                                                                                                               "watch and report errors with accept \"application/vnd.kubernetes.protobuf,application/json\" [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-api-machinery] client-go should negotiate watch and report errors with accept \"application/vnd.kubernetes.protobuf\"":                                                                                                                                                                                                                "watch and report errors with accept \"application/vnd.kubernetes.protobuf\" [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-api-machinery][Feature:APIServer] TestTLSDefaults":                                                                                                                                                                                                                                                                                    "TestTLSDefaults [Suite:openshift/conformance/parallel]",
	"[Top Level] [sig-api-machinery][Feature:APIServer] anonymous browsers should get a 403 from /":                                                                                                                                                                                                                                                         "anonymous browsers should get a 403 from / [Suite:openshift/conformance/parallel]",
	"[Top Level] [sig-api-machinery][Feature:APIServer] authenticated browser should get a 200 from /":                                                                                                                                                                                                                                                      "authenticated browser should get a 200 from / [Suite:openshift/conformance/parallel]",
	"[Top Level] [sig-api-machinery][Feature:Audit] Basic audit should audit API calls":                                                                                                                                                                                                                                                                     "should audit API calls [Disabled:SpecialConfig] [Suite:openshift]",
	"[Top Level] [sig-api-machinery][Feature:ClusterResourceQuota] Cluster resource quota should control resource limits across namespaces":                                                                                                                                                                                                                 "should control resource limits across namespaces [Suite:openshift/conformance/parallel]",
	"[Top Level] [sig-apps] CronJob should delete failed finished jobs with limit of one job":                                                                                                                                                                                                                                                               "should delete failed finished jobs with limit of one job [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-apps] CronJob should delete successful finished jobs with limit of one successful job":                                                                                                                                                                                                                                                "should delete successful finished jobs with limit of one successful job [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-apps] CronJob should not emit unexpected warnings":                                                                                                                                                                                                                                                                                    "should not emit unexpected warnings [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-apps] CronJob should not schedule jobs when suspended [Slow]":                                                                                                                                                                                                                                                                         "should not schedule jobs when suspended [Slow] [Suite:k8s]",
	"[Top Level] [sig-apps] CronJob should not schedule new jobs when ForbidConcurrent [Slow]":                                                                                                                                                                                                                                                              "should not schedule new jobs when ForbidConcurrent [Slow] [Suite:k8s]",
	"[Top Level] [sig-apps] CronJob should remove from active list jobs that have been deleted":                                                                                                                                                                                                                                                             "should remove from active list jobs that have been deleted [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-apps] CronJob should replace jobs when ReplaceConcurrent":                                                                                                                                                                                                                                                                             "should replace jobs when ReplaceConcurrent [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-apps] CronJob should schedule multiple jobs concurrently":                                                                                                                                                                                                                                                                             "should schedule multiple jobs concurrently [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-apps] Daemon set [Serial] should not update pod when spec was updated and update strategy is OnDelete":                                                                                                                                                                                                                                "should not update pod when spec was updated and update strategy is OnDelete [Suite:openshift/conformance/serial] [Suite:k8s]",
	"[Top Level] [sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]":                                                                                                                                                                                                                                                     "should retry creating failed daemon pods [Conformance] [Suite:openshift/conformance/serial/minimal] [Suite:k8s]",
	"[Top Level] [sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]":                                                                                                                                                                                                                                                 "should rollback without unnecessary restarts [Conformance] [Suite:openshift/conformance/serial/minimal] [Suite:k8s]",
	"[Top Level] [sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]":                                                                                                                                                                                                                                                           "should run and stop complex daemon [Conformance] [Suite:openshift/conformance/serial/minimal] [Suite:k8s]",
	"[Top Level] [sig-apps] Daemon set [Serial] should run and stop complex daemon with node affinity":                                                                                                                                                                                                                                                      "should run and stop complex daemon with node affinity [Suite:openshift/conformance/serial] [Suite:k8s]",
	"[Top Level] [sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]":                                                                                                                                                                                                                                                            "should run and stop simple daemon [Conformance] [Suite:openshift/conformance/serial/minimal] [Suite:k8s]",
	"[Top Level] [sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]":                                                                                                                                                                                                                 "should update pod when spec was updated and update strategy is RollingUpdate [Conformance] [Suite:openshift/conformance/serial/minimal] [Suite:k8s]",
	"[Top Level] [sig-apps] DaemonRestart [Disruptive] Controller Manager should not create/delete replicas across restart":                                                                                                                                                                                                                                 "Controller Manager should not create/delete replicas across restart [Serial] [Suite:k8s]",
	"[Top Level] [sig-apps] DaemonRestart [Disruptive] Kubelet should not restart containers across restart":                                                                                                                                                                                                                                                "Kubelet should not restart containers across restart [Serial] [Suite:k8s]",
	"[Top Level] [sig-apps] DaemonRestart [Disruptive] Scheduler should continue assigning pods to nodes across restart":                                                                                                                                                                                                                                    "Scheduler should continue assigning pods to nodes across restart [Serial] [Suite:k8s]",
	"[Top Level] [sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]":                                                                                                                                                                                                                                         "RecreateDeployment should delete old pods and create new ones [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]":                                                                                                                                                                                                                                    "RollingUpdateDeployment should delete old pods and create new ones [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-apps] Deployment deployment reaping should cascade to its replica sets and pods":                                                                                                                                                                                                                                                      "deployment reaping should cascade to its replica sets and pods [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-apps] Deployment deployment should delete old replica sets [Conformance]":                                                                                                                                                                                                                                                             "deployment should delete old replica sets [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-apps] Deployment deployment should support proportional scaling [Conformance]":                                                                                                                                                                                                                                                        "deployment should support proportional scaling [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-apps] Deployment deployment should support rollover [Conformance]":                                                                                                                                                                                                                                                                    "deployment should support rollover [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-apps] Deployment iterative rollouts should eventually progress":                                                                                                                                                                                                                                                                       "iterative rollouts should eventually progress [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-apps] Deployment should not disrupt a cloud load-balancer's connectivity during rollout":                                                                                                                                                                                                                                              "should not disrupt a cloud load-balancer's connectivity during rollout [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-apps] Deployment test Deployment ReplicaSet orphaning and adoption regarding controllerRef":                                                                                                                                                                                                                                           "test Deployment ReplicaSet orphaning and adoption regarding controllerRef [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-apps] DisruptionController evictions: enough pods, absolute => should allow an eviction":                                                                                                                                                                                                                                              "evictions: enough pods, absolute => should allow an eviction [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-apps] DisruptionController evictions: enough pods, replicaSet, percentage => should allow an eviction":                                                                                                                                                                                                                                "evictions: enough pods, replicaSet, percentage => should allow an eviction [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-apps] DisruptionController evictions: maxUnavailable allow single eviction, percentage => should allow an eviction":                                                                                                                                                                                                                   "evictions: maxUnavailable allow single eviction, percentage => should allow an eviction [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-apps] DisruptionController evictions: maxUnavailable deny evictions, integer => should not allow an eviction":                                                                                                                                                                                                                         "evictions: maxUnavailable deny evictions, integer => should not allow an eviction [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-apps] DisruptionController evictions: no PDB => should allow an eviction":                                                                                                                                                                                                                                                             "evictions: no PDB => should allow an eviction [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-apps] DisruptionController evictions: too few pods, absolute => should not allow an eviction":                                                                                                                                                                                                                                         "evictions: too few pods, absolute => should not allow an eviction [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-apps] DisruptionController evictions: too few pods, replicaSet, percentage => should not allow an eviction":                                                                                                                                                                                                                           "evictions: too few pods, replicaSet, percentage => should not allow an eviction [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-apps] DisruptionController should block an eviction until the PDB is updated to allow it":                                                                                                                                                                                                                                             "should block an eviction until the PDB is updated to allow it [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-apps] DisruptionController should create a PodDisruptionBudget":                                                                                                                                                                                                                                                                       "should create a PodDisruptionBudget [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-apps] DisruptionController should update PodDisruptionBudget status":                                                                                                                                                                                                                                                                  "should update PodDisruptionBudget status [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-apps] Job should adopt matching orphans and release non-matching pods [Conformance]":                                                                                                                                                                                                                                                  "should adopt matching orphans and release non-matching pods [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-apps] Job should delete a job [Conformance]":                                                                                                                                                                                                                                                                                          "should delete a job [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-apps] Job should fail to exceed backoffLimit":                                                                                                                                                                                                                                                                                         "should fail to exceed backoffLimit [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-apps] Job should fail when exceeds active deadline":                                                                                                                                                                                                                                                                                   "should fail when exceeds active deadline [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-apps] Job should remove pods when job is deleted":                                                                                                                                                                                                                                                                                     "should remove pods when job is deleted [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-apps] Job should run a job to completion when tasks sometimes fail and are locally restarted [Conformance]":                                                                                                                                                                                                                           "should run a job to completion when tasks sometimes fail and are locally restarted [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]",
	"[Top Level] [sig-apps] Job should run a job to completion when tasks sometimes fail and are not locally restarted":                                                                                                                                                                                                                                     "should run a job to completion when tasks sometimes fail and are not locally restarted [Flaky] [Suite:k8s]",
	"[Top Level] [sig-apps] Job should run a job to completion when tasks succeed":                                                                                                                                                                                                                                                                          "should run a job to completion when tasks succeed [Suite:openshift/conformance/parallel] [Suite:k8s]",
	"[Top Level] [sig-apps] Network Partition [Disruptive] [Slow] [k8s.io] Pods should be evicted from unready Node [Feature:TaintEviction] All pods on the unreachable node should be marked as NotReady upon the node turn NotReady AND all pods should be evicted after eviction timeout passes":                                                         "[Feature:TaintEviction] All pods on the unreachable node should be marked as NotReady upon the node turn NotReady AND all pods should be evicted after eviction timeout passes [Serial] [Suite:k8s]",
	"[Top Level] [sig-apps] Network Partition [Disruptive] [Slow] [k8s.io] Pods should return to running and ready state after network partition is healed All pods on the unreachable node should be marked as NotReady upon the node turn NotReady AND all pods should be mark back to Ready when the node get back to Ready before pod eviction timeout": "All pods on the unreachable node should be marked as NotReady upon the node turn NotReady AND all pods should be mark back to Ready when the node get back to Ready before pod eviction timeout [Serial] [Suite:k8s]",

}

func init() {
	ginkgo.WalkTests(func(name, parentName string, node types.TestNode) {
		combined := name
		if len(parentName) > 0 {
			combined = parentName + " " + combined
		}
		if updated, ok := annotations[combined]; ok {
			node.SetText(updated)
		} else {
			panic(fmt.Sprintf("unable to find test %s", combined))
		}
	})
}
